c(cid:13) ISO/IEC

N4296

[ Note: These restrictions apply to the declarative region into which a name is introduced, which is not neces-
sarily the same as the region in which the declaration occurs. In particular, elaborated-type-speciﬁers (7.1.6.3)
and friend declarations (11.3) may introduce a (possibly not visible) name into an enclosing namespace; these
restrictions apply to that region. Local extern declarations (3.5) may introduce a name into the declarative
region where the declaration appears and also introduce a (possibly not visible) name into an enclosing
namespace; these restrictions apply to both regions. — end note ]
[ Note: The name lookup rules are summarized in 3.4. — end note ]
3.3.2 Point of declaration

[basic.scope.pdecl]
1 The point of declaration for a name is immediately after its complete declarator (Clause 8) and before its

5

initializer (if any), except as noted below. [ Example:

unsigned char x = 12;
{ unsigned char x = x; }

2

Here the second x is initialized with its own (indeterminate) value. — end example ]
[ Note: a name from an outer scope remains visible up to the point of declaration of the name that hides
it.[ Example:
const int
{ int

i[i]; }

i = 2;

declares a block-scope array of two integers. — end example ] — end note ]

3 The point of declaration for a class or class template ﬁrst declared by a class-speciﬁer is immediately
after the identiﬁer or simple-template-id (if any) in its class-head (Clause 9). The point of declaration
for an enumeration is immediately after the identiﬁer (if any) in either its enum-speciﬁer (7.2) or its ﬁrst
opaque-enum-declaration (7.2), whichever comes ﬁrst. The point of declaration of an alias or alias template
immediately follows the type-id to which the alias refers.

4 The point of declaration of a using-declaration that does not name a constructor is immediately after the

using-declaration (7.3.3).

5 The point of declaration for an enumerator is immediately after its enumerator-deﬁnition.[ Example:

const int x = 12;
{ enum { x = x }; }

Here, the enumerator x is initialized with the value of the constant x, namely 12. — end example ]

6 After the point of declaration of a class member, the member name can be looked up in the scope of its

class. [ Note: this is true even if the class is an incomplete class. For example,

struct X {

};

enum E { z = 16 };
int b[X::z];

// OK

— end note ]

7 The point of declaration of a class ﬁrst declared in an elaborated-type-speciﬁer is as follows:

(7.1)

—

for a declaration of the form

class-key attribute-speciﬁer-seqopt identiﬁer ;

the identiﬁer is declared to be a class-name in the scope that contains the declaration, otherwise

§ 3.3.2

40

